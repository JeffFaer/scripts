#!/usr/bin/env bash

usage() {
    echo "$0 [-h|--help] [--destination-root DIR] [backup path]..."
    echo "--date                defaults to today"
    echo "--destination-root    defaults to \$PWD ($PWD)"
    echo "--dry-run"
    echo "--list-only"
    exit 1
}

DEFAULT_PATHS_TO_BACKUP=(
    $(eval echo ~$(logname))
    /opt
    /etc
    /var/lib/plexmediaserver
)

######################
#  Helper Functions  #
######################

# $1: The root directory
# $2: The current destination
get_previous_destination() {
    find "$1" -maxdepth 1 -mindepth 1 -type d -not -path "$2"\
        | sort -rg\
        | head -1
}

get_disk_usage() {
    du -sB1 "$1" | cut -f1
}

#####################
#  Parse Arguments  #
#####################

opts=$(getopt -o 'h' --long 'help,date:,destination-root:,dry-run,list-only' -n "$0" -- "$@")
exit_code=$?
if [[ ${exit_code} != 0 ]]; then
    echo "Error parsing options: ${opts}"
    exit 1
fi
eval set -- "${opts}"

date=now
destination_root=$PWD
dry_run=
list_only=

while true; do
    case "$1" in
        --)
            shift
            break
            ;;
        -h|--help)
            usage
            ;;
        --date)
            if [[ -n "$2" ]]; then
                date="$2"
            fi
            shift 2
            ;;
        --destination-root)
            if [[ -n $2 ]]; then
                destination_root=$(realpath "$2")
            fi
            shift 2
            ;;
        --dry-run)
            dry_run=1
            shift
            ;;
        --list-only)
            list_only=1
            shift
            ;;
        *)
            echo "Unrecognized option: $1"
            exit 1
    esac
done

if [[ $# -gt 0 ]]; then
    paths_to_backup=( "$@" )
else
    paths_to_backup=( "${DEFAULT_PATHS_TO_BACKUP[@]}" )
fi

###########
#  Setup  #
###########
if ! date_string=$(date --date "${date}" +%Y.%m.%d); then
    echo "Invalid date ${date}"
    exit 1
fi
destination="${destination_root}/${date_string}"

previous_destination=$(\
    get_previous_destination "${destination_root}" "${destination}")

mkdir -p "${destination}"
exec &> >(tee -ia "${destination}/log")

################
#  Processing  #
################

echo "Starting at $(date)"
if [[ -n "${dry_run}" ]]; then
    echo "THIS IS A DRY RUN"
fi

if [[ -n "${previous_destination}" ]]; then
    echo "Identified ${previous_destination} as previous backup."
fi

echo "Estimating previous disk usage."
usage_before=$(get_disk_usage "${destination_root}")

echo "Getting package list -> ${destination}/packages.dpkg"
dpkg -l > "${destination}/packages.dpkg"

if [[ -n "${list_only}" ]]; then
    for path in "${paths_to_backup[@]}"; do
        cmd=(ls -R "${path}")
        echo "${cmd[*]}"
        "${cmd[@]}" > "${destination}/${path//\//_}.ls"
    done
else
    cmd=(rsync)
    cmd+=(
      --archive
      --hard-links
      --human-readable
      --verbose
      --progress
      --relative
      --filter ':- .backup_exclude'
    )
    if [[ -n "${dry_run}" ]]; then
        cmd+=( --dry-run )
    fi
    if [[ -n "${previous_destination}" ]]; then
        cmd+=( --link-dest "${previous_destination}" )
    fi
    cmd+=( "${paths_to_backup[@]}" "${destination}" )

    echo "${cmd[*]}"
    "${cmd[@]}"
fi


echo "Estimating incremental disk usage."
usage_after=$(get_disk_usage "${destination_root}")
usage_diff=$((usage_after - usage_before))

human_usage_diff=$(numfmt --to=iec-i --suffix=B "${usage_diff}")
echo "Used ${human_usage_diff}"

echo "Ended at $(date)"
