#!/usr/bin/env bash
set -u

scripts_dir="$(realpath "$(dirname "${BASH_SOURCE}")"/..)"
PATH="${PATH}:${scripts_dir}"

source ~/.bash_functions || exit 1

BACKUP_LOCATION="$(xdg-user-dir DOCUMENTS)/Computers"

backup::unifi() {
    "$(dirname "${BASH_SOURCE}")/unifi/backup-unifi.cron" "$@"
}

backup::octopi() {
    "$(dirname "${BASH_SOURCE}")/octopi/backup-octopi.cron" "$@"
}

backup::sonarr() {
    "$(dirname "${BASH_SOURCE}")/*arr/backup-*arr.cron" "sonarr" "$@"
}

backup::lidarr() {
    "$(dirname "${BASH_SOURCE}")/*arr/backup-*arr.cron" "lidarr" "$@"
}

backup::readarr() {
    "$(dirname "${BASH_SOURCE}")/*arr/backup-*arr.cron" "readarr" "$@"
}

backup::hass() {
    "$(dirname "${BASH_SOURCE}")/hass/backup-hass.cron" "$@"
}

fns=( $(compgen -A function "backup::") )
allowed_fns=()
for ((i=0; i<${#fns[@]}; i++)); do
    fn="${fns[$i]}"
    if dotfiles::is_function_exported "${fn}"; then
        continue
    fi

    name="${fn#backup::}"
    if [[ "${name}" = _* ]]; then
        continue
    fi

    allowed_fns+=( "${fn}" )
done

fns=( "${allowed_fns[@]}" )
failed=()
for ((i=0;i<${#fns[@]};i++)); do
    fn="${fns[$i]}"
    name="${fn#backup::}"
    dir="${BACKUP_LOCATION}/${name}"

    if ((i>0)); then
        echo
        echo
    fi
    echo "Backing up ${name} to ${dir}"
    echo
    echo
    if [[ ! -d "${dir}" ]]; then
        echo "${dir} does not exist" 1>&2
        failed+=( "${name}" )
    elif ! "${fn}" "${dir}"; then
        failed+=( "${name}" )
    fi
done

if [[ ${#failed[@]} -gt 0 ]]; then
    echo 1>&2
    echo 1>&2
    echo "Backups failed: ${failed[@]}" 1>&2
    exit 1
fi
