#!/usr/bin/env bash

_SUBTITLE_DIRS=( "." "./subs" "./subtitles" "./Subs" )
_SUBTITLE_EXTENSIONS="(srt|ssa)$"

warn() {
    echo "$@" >&2
}

die() {
    warn "$@"
    warn

    local i=0
    while caller $i; do
        ((i++))
    done | while read line func file; do
      warn -e "${file}:${line}\t${func}"
    done

    exit 1
}

# Ensures that $1 exists and is a file that ends with .mkv
mkvtool::_ensure_mkv() {
  [[ $# == 1 ]] || die "Only exected one argument: file"
  local mkv_file="$1"
  [[ "$mkv_file" == *.mkv ]] || die "get_tags only works on mkv files."
  [[ -f "$mkv_file" ]] || die "File does not exist: $mkv_file"
}

# Combines a video file and zero or more subtitle titles into an mkv file.
# $1: The video file to convert.
# $2+: Subtitle files.
mkvtool::to_mkv() {
  local video_file="$1"
  local subtitles=( "${@:2}" )

  local dir=$(dirname "$video_file")
  local video_base=$(basename "$video_file")
  video_base=${video_base%.*}
  local srt_dir
  for srt_dir in "${_SUBTITLE_DIRS[@]}"; do
      local file
      for file in "${dir}/${srt_dir}/"*; do
          if [[ ! -f "$file" ]]; then
              continue
          fi

          if [[ "$file" = /* ]]; then
              file=$(realpath "$file")
          else
              file=$(realpath --relative-to "$PWD" "$file")
          fi

          local base=$(basename "$file")

          if [[ "$base" = "$video_base"* && "$file" =~ $_SUBTITLE_EXTENSIONS ]]; then
              warn "Found subtitle file $file"
              subtitles+=( "$file" )
          fi
      done
  done

  if [[ "$video_file" = *.mkv && "${#subtitles[@]}" -eq 0 ]]; then
      die "Video file is already an mkv, and there are no subtitles. There's nothing to do."
  fi

  local result
  if [[ "$video_file" = *.mkv ]]; then
      result="${video_file%.*}_combined.mkv"
  else
      result="${video_file%.*}.mkv"
  fi

  local mkvmerge=(
    mkvmerge
    --default-language eng
    -o "$result"
    "$video_file"
  )

  local subtitle
  for subtitle in "${subtitles[@]}"; do
      if [[ "$subtitle" =~ _([a-zA-Z]+)\.[^/]+$ ]]; then
          mkvmerge+=( --language "0:${BASH_REMATCH[1]}" )
      fi
      mkvmerge+=( "$subtitle" )
  done

  echo "Attempting to create ${result}..."

  local out
  out=$("${mkvmerge[@]}")
  if [[ $? != 0 ]]; then
      warn "Error while combining video file:"
      warn
      warn "$out"
      return 1
  fi

  local rm=(rm "$video_file" "${subtitles[@]}")

  echo "Successfully created ${result}!"
  echo
  echo "Execute the following to remove old files:"
  printf "%q " "${rm[@]}"
  echo
}

# Prints the tags of an mkv file.
# $1: MKV file.
mkvtool::get_tags() {
  [[ $# == 1 ]] || die "Only exected one argument: file"
  local mkv_file="$1"
  mkvtool::_ensure_mkv "$mkv_file"

  local xml
  xml="$(mkvextract tags "$mkv_file")"
  if [[ $? != 0 ]]; then
      die "Could not read tags from ${mkv_file}: ${xml}"
  fi


  local i=1
  local tags=()
  local tag
  while true; do
      tag=$(xpath -q -e "concat(//Tag[last()]//Simple[$i]/Name/text(), '=', //Tag[last()]//Simple[$i]/String/text())" <<< "$xml")
      if [[ $? != 0 ]]; then
          die "Could not extract tag from ${mkv_file}: $tag"
      fi
      if [[ "$tag" == "=" ]]; then
          break
      fi

      tags+=( "$tag" )

      ((i++))
  done

  local IFS=$'\n'
  echo "${tags[*]}"
  unset IFS
}

# Parses the filename of an mkv file and updates its tags.
# $1: MKV file.
mkvtool::update_tags() {
  [[ $# == 1 ]] || die "Only exected one argument: file"
  local mkv_file="$1"
  mkvtool::_ensure_mkv "$mkv_file"

  local tv_show="E0+?([0-9]+) - (.+)\."
  local movie="((0+?([0-9]+)\. )?([^_]+))(_([0-9]+))?\."

  local new_file_name
  local part_number
  local title
  local date_released
  if [[ "$mkv_file" =~ $tv_show ]]; then
      part_number=${BASH_REMATCH[1]}
      title=${BASH_REMATCH[2]}
  elif [[ "$mkv_file" =~ $movie ]]; then
      new_file_name=${BASH_REMATCH[1]}
      part_number=${BASH_REMATCH[3]}
      title=${BASH_REMATCH[4]}
      date_released=${BASH_REMATCH[6]}
  else
      die "Video file isn't in a known format: $mkv_file"
  fi

  local tags=()
  local tag
  local value
  for tag in "part_number" "title" "date_released"; do
      value=${!tag}
      if [[ -n "$value" ]]; then
          tags+=( "$tag" "$value" )
      fi
  done

  mkvtool::set_tags "$mkv_file" "${tags[@]}"
  if [[ $? != 0 ]]; then
      return 1
  fi

  if [[ -n "$new_file_name" ]]; then
      local file_name=$(basename "$mkv_file")
      new_file_name+=".mkv"

      if [[ "$file_name" != "$new_file_name" ]]; then
          local dest="$(dirname "$mkv_file")/$new_file_name"
          warn "Renaming $mkv_file -> $dest"

          mv -i "$mkv_file" "$dest"
      fi
  fi
}

# Sets tags on the given MKV file without overriding other tags.
# $1: MKV file.
# $2: Tag name
# $3: Tag value
# $4: Tag name
# $5: Tag value
# .
# .
# .
mkvtool::set_tags() {
  [[ $(( $# % 2)) == 1 ]] || die "Expected an odd number of arguments. Did you remember to specify a value for each tag?"
  local mkv_file="$1"
  mkvtool::_ensure_mkv "$mkv_file"

  local wanted_tags=( "${@:2}" )
  if [[ "${#wanted_tags[@]}" -eq 0 ]]; then
      return
  fi

  local wanted_tags_xml
  local selector
  local title

  local tag
  local value
  local i
  for i in $(seq 0 $((${#wanted_tags[@]} / 2 - 1))); do
      tag=${wanted_tags[i*2]^^}
      value=${wanted_tags[i*2+1]}

      if [[ "$tag" == "TITLE" ]]; then
          title=$value
      fi

      wanted_tags_xml+="
<Simple>
  <Name>${tag}</Name>
  <String>${value}</String>
</Simple>"

      if [[ -n "$selector" ]]; then
          selector+=" and "
      fi
      selector+="not(Name[translate(text(), 'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')=\"${tag}\"])"
  done

  local xml
  xml="$(mkvextract tags "$mkv_file")"
  if [[ $? != 0 ]]; then
      die "Could not read tags from ${mkv_file}: ${xml}"
  fi

  local existing_tags_xml
  existing_tags_xml=$(xpath -q -e "//Tag[last()]//Simple[$selector]" <<< "$xml")
  if [[ $? != 0 ]]; then
      die "Could not extract existing tags from ${mkv_file}: ${existing_tags_xml}"
  fi

  local new_xml="
<Tags>
  <Tag>
    ${existing_tags_xml}
    ${wanted_tags_xml}
  </Tag>
</Tags>"

  local new_xml_file=$(mktemp)
  echo "$new_xml" > "$new_xml_file"

  mkvpropedit=(
      mkvpropedit "$mkv_file" --tags "global:$new_xml_file"
  )
  if [[ -n "$title" ]]; then
      mkvpropedit+=( -e info -s "title=${title}" )
  fi

  "${mkvpropedit[@]}"
  local ret=$?

  rm "$new_xml_file"

  return $ret
}

command="$1"
if [[ $(type -t "mkvtool::$command") != "function" ]]; then
    die "Unknown command: $command"
fi

"mkvtool::$command" "${@:2}"
